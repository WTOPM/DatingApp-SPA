{"version":3,"sources":["/Users/annaodnostalko/Desktop/GIT/DatingApp/DatingApp-SPA/node_modules/@kolkov/ngx-gallery/fesm2015/kolkov-ngx-gallery.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2IAyCE;;;;qMAImM,AAK/K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;88EAgVpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DA+H6D,AAShC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;s1EA8J7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6DA0E2D,AAQhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kuDA2N3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kEA0EgE,AAQhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6iCA0VhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDA6CkD,AAU5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wwBAetB;;;;;;;;;;;;;;;;;;6DAkB2D,AAQ/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wUAiB5B;;;;;;;;;;;;8DAY4D,AAQhC;;;;;;;;;;;;;;;;;;;;;ukBAe5B;;;;;;;;;iEAS+D,AAQlC;;;;;;;;;;;;EAU7B,oHAGqB;;;;;;EAErB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAkBmB","file":"kolkov-ngx-gallery.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { Renderer2, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, ElementRef, ChangeDetectorRef, Input, Output, ViewChild, HostListener, Component, ChangeDetectionStrategy, HostBinding, ViewEncapsulation, NgModule } from '@angular/core';\nimport { DomSanitizer, HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\nimport { CommonModule } from '@angular/common';\n\nlet NgxGalleryService = class NgxGalleryService {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.swipeHandlers = new Map();\n    }\n    manageSwipe(status, element, id, nextHandler, prevHandler) {\n        const handlers = this.getSwipeHandlers(id);\n        // swipeleft and swiperight are available only if hammerjs is included\n        try {\n            if (status && !handlers) {\n                this.swipeHandlers.set(id, [\n                    this.renderer.listen(element.nativeElement, 'swipeleft', () => nextHandler()),\n                    this.renderer.listen(element.nativeElement, 'swiperight', () => prevHandler())\n                ]);\n            }\n            else if (!status && handlers) {\n                handlers.map((handler) => handler());\n                this.removeSwipeHandlers(id);\n            }\n        }\n        catch (e) {\n        }\n    }\n    validateUrl(url) {\n        if (url.replace) {\n            return url.replace(new RegExp(' ', 'g'), '%20')\n                .replace(new RegExp('\\'', 'g'), '%27');\n        }\n        else {\n            return url;\n        }\n    }\n    getBackgroundUrl(image) {\n        return 'url(\\'' + this.validateUrl(image) + '\\')';\n    }\n    getSwipeHandlers(id) {\n        return this.swipeHandlers.get(id);\n    }\n    removeSwipeHandlers(id) {\n        this.swipeHandlers.delete(id);\n    }\n};\nNgxGalleryService.ctorParameters = () => [\n    { type: Renderer2 }\n];\nNgxGalleryService.ɵprov = ɵɵdefineInjectable({ factory: function NgxGalleryService_Factory() { return new NgxGalleryService(ɵɵinject(Renderer2)); }, token: NgxGalleryService, providedIn: \"root\" });\nNgxGalleryService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    })\n], NgxGalleryService);\n\nlet NgxGalleryPreviewComponent = class NgxGalleryPreviewComponent {\n    constructor(sanitization, elementRef, helperService, renderer, changeDetectorRef) {\n        this.sanitization = sanitization;\n        this.elementRef = elementRef;\n        this.helperService = helperService;\n        this.renderer = renderer;\n        this.changeDetectorRef = changeDetectorRef;\n        this.showSpinner = false;\n        this.positionLeft = 0;\n        this.positionTop = 0;\n        this.zoomValue = 1;\n        this.loading = false;\n        this.rotateValue = 0;\n        this.index = 0;\n        this.previewOpen = new EventEmitter();\n        this.previewClose = new EventEmitter();\n        this.activeChange = new EventEmitter();\n        this.isOpen = false;\n        this.initialX = 0;\n        this.initialY = 0;\n        this.initialLeft = 0;\n        this.initialTop = 0;\n        this.isMove = false;\n    }\n    ngOnInit() {\n        if (this.arrows && this.arrowsAutoHide) {\n            this.arrows = false;\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.swipe) {\n            this.helperService.manageSwipe(this.swipe, this.elementRef, 'preview', () => this.showNext(), () => this.showPrev());\n        }\n    }\n    ngOnDestroy() {\n        if (this.keyDownListener) {\n            this.keyDownListener();\n        }\n    }\n    onMouseEnter() {\n        if (this.arrowsAutoHide && !this.arrows) {\n            this.arrows = true;\n        }\n    }\n    onMouseLeave() {\n        if (this.arrowsAutoHide && this.arrows) {\n            this.arrows = false;\n        }\n    }\n    onKeyDown(e) {\n        if (this.isOpen) {\n            if (this.keyboardNavigation) {\n                if (this.isKeyboardPrev(e)) {\n                    this.showPrev();\n                }\n                else if (this.isKeyboardNext(e)) {\n                    this.showNext();\n                }\n            }\n            if (this.closeOnEsc && this.isKeyboardEsc(e)) {\n                this.close();\n            }\n        }\n    }\n    open(index) {\n        this.previewOpen.emit();\n        this.index = index;\n        this.isOpen = true;\n        this.show(true);\n        if (this.forceFullscreen) {\n            this.manageFullscreen();\n        }\n        this.keyDownListener = this.renderer.listen('window', 'keydown', (e) => this.onKeyDown(e));\n    }\n    close() {\n        this.isOpen = false;\n        this.closeFullscreen();\n        this.previewClose.emit();\n        this.stopAutoPlay();\n        if (this.keyDownListener) {\n            this.keyDownListener();\n        }\n    }\n    imageMouseEnter() {\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.stopAutoPlay();\n        }\n    }\n    imageMouseLeave() {\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.startAutoPlay();\n        }\n    }\n    startAutoPlay() {\n        if (this.autoPlay) {\n            this.stopAutoPlay();\n            this.timer = setTimeout(() => {\n                if (!this.showNext()) {\n                    this.index = -1;\n                    this.showNext();\n                }\n            }, this.autoPlayInterval);\n        }\n    }\n    stopAutoPlay() {\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n    }\n    showAtIndex(index) {\n        this.index = index;\n        this.show();\n    }\n    showNext() {\n        if (this.canShowNext()) {\n            this.index++;\n            if (this.index === this.images.length) {\n                this.index = 0;\n            }\n            this.show();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    showPrev() {\n        if (this.canShowPrev()) {\n            this.index--;\n            if (this.index < 0) {\n                this.index = this.images.length - 1;\n            }\n            this.show();\n        }\n    }\n    canShowNext() {\n        if (this.loading) {\n            return false;\n        }\n        else if (this.images) {\n            return this.infinityMove || this.index < this.images.length - 1;\n        }\n        else {\n            return false;\n        }\n    }\n    canShowPrev() {\n        if (this.loading) {\n            return false;\n        }\n        else if (this.images) {\n            return this.infinityMove || this.index > 0;\n        }\n        else {\n            return false;\n        }\n    }\n    manageFullscreen() {\n        if (this.fullscreen || this.forceFullscreen) {\n            const doc = document;\n            if (!doc.fullscreenElement && !doc.mozFullScreenElement\n                && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {\n                this.openFullscreen();\n            }\n            else {\n                this.closeFullscreen();\n            }\n        }\n    }\n    getSafeUrl(image) {\n        return this.sanitization.bypassSecurityTrustUrl(image);\n    }\n    zoomIn() {\n        if (this.canZoomIn()) {\n            this.zoomValue += this.zoomStep;\n            if (this.zoomValue > this.zoomMax) {\n                this.zoomValue = this.zoomMax;\n            }\n        }\n    }\n    zoomOut() {\n        if (this.canZoomOut()) {\n            this.zoomValue -= this.zoomStep;\n            if (this.zoomValue < this.zoomMin) {\n                this.zoomValue = this.zoomMin;\n            }\n            if (this.zoomValue <= 1) {\n                this.resetPosition();\n            }\n        }\n    }\n    rotateLeft() {\n        this.rotateValue -= 90;\n    }\n    rotateRight() {\n        this.rotateValue += 90;\n    }\n    getTransform() {\n        return this.sanitization.bypassSecurityTrustStyle('scale(' + this.zoomValue + ') rotate(' + this.rotateValue + 'deg)');\n    }\n    canZoomIn() {\n        return this.zoomValue < this.zoomMax;\n    }\n    canZoomOut() {\n        return this.zoomValue > this.zoomMin;\n    }\n    canDragOnZoom() {\n        return this.zoom && this.zoomValue > 1;\n    }\n    mouseDownHandler(e) {\n        if (this.canDragOnZoom()) {\n            this.initialX = this.getClientX(e);\n            this.initialY = this.getClientY(e);\n            this.initialLeft = this.positionLeft;\n            this.initialTop = this.positionTop;\n            this.isMove = true;\n            e.preventDefault();\n        }\n    }\n    mouseUpHandler(e) {\n        this.isMove = false;\n    }\n    mouseMoveHandler(e) {\n        if (this.isMove) {\n            this.positionLeft = this.initialLeft + (this.getClientX(e) - this.initialX);\n            this.positionTop = this.initialTop + (this.getClientY(e) - this.initialY);\n        }\n    }\n    getClientX(e) {\n        return e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n    }\n    getClientY(e) {\n        return e.touches && e.touches.length ? e.touches[0].clientY : e.clientY;\n    }\n    resetPosition() {\n        if (this.zoom) {\n            this.positionLeft = 0;\n            this.positionTop = 0;\n        }\n    }\n    isKeyboardNext(e) {\n        return e.keyCode === 39;\n    }\n    isKeyboardPrev(e) {\n        return e.keyCode === 37;\n    }\n    isKeyboardEsc(e) {\n        return e.keyCode === 27;\n    }\n    openFullscreen() {\n        const element = document.documentElement;\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        }\n        else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        }\n        else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        }\n        else if (element.webkitRequestFullscreen) {\n            element.webkitRequestFullscreen();\n        }\n    }\n    closeFullscreen() {\n        if (this.isFullscreen()) {\n            const doc = document;\n            if (doc.exitFullscreen) {\n                doc.exitFullscreen();\n            }\n            else if (doc.msExitFullscreen) {\n                doc.msExitFullscreen();\n            }\n            else if (doc.mozCancelFullScreen) {\n                doc.mozCancelFullScreen();\n            }\n            else if (doc.webkitExitFullscreen) {\n                doc.webkitExitFullscreen();\n            }\n        }\n    }\n    isFullscreen() {\n        const doc = document;\n        return doc.fullscreenElement || doc.webkitFullscreenElement\n            || doc.mozFullScreenElement || doc.msFullscreenElement;\n    }\n    show(first = false) {\n        this.loading = true;\n        this.stopAutoPlay();\n        this.activeChange.emit(this.index);\n        if (first || !this.animation) {\n            this._show();\n        }\n        else {\n            setTimeout(() => this._show(), 600);\n        }\n    }\n    _show() {\n        this.zoomValue = 1;\n        this.rotateValue = 0;\n        this.resetPosition();\n        this.src = this.getSafeUrl(this.images[this.index]);\n        this.srcIndex = this.index;\n        this.description = this.descriptions[this.index];\n        this.changeDetectorRef.markForCheck();\n        setTimeout(() => {\n            if (this.isLoaded(this.previewImage.nativeElement)) {\n                this.loading = false;\n                this.startAutoPlay();\n                this.changeDetectorRef.markForCheck();\n            }\n            else {\n                setTimeout(() => {\n                    if (this.loading) {\n                        this.showSpinner = true;\n                        this.changeDetectorRef.markForCheck();\n                    }\n                });\n                this.previewImage.nativeElement.onload = () => {\n                    this.loading = false;\n                    this.showSpinner = false;\n                    this.previewImage.nativeElement.onload = null;\n                    this.startAutoPlay();\n                    this.changeDetectorRef.markForCheck();\n                };\n            }\n        });\n    }\n    isLoaded(img) {\n        if (!img.complete) {\n            return false;\n        }\n        return !(typeof img.naturalWidth !== 'undefined' && img.naturalWidth === 0);\n    }\n};\nNgxGalleryPreviewComponent.ctorParameters = () => [\n    { type: DomSanitizer },\n    { type: ElementRef },\n    { type: NgxGalleryService },\n    { type: Renderer2 },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"images\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"descriptions\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"showDescription\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"arrows\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"arrowsAutoHide\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"swipe\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"fullscreen\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"forceFullscreen\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"closeOnClick\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"closeOnEsc\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"keyboardNavigation\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"arrowPrevIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"arrowNextIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"closeIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"fullscreenIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"spinnerIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"autoPlay\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"autoPlayInterval\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"autoPlayPauseOnHover\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"infinityMove\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"zoom\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"zoomStep\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"zoomMax\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"zoomMin\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"zoomInIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"zoomOutIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"animation\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"actions\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"rotate\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"rotateLeftIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"rotateRightIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"download\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"downloadIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryPreviewComponent.prototype, \"bullets\", void 0);\n__decorate([\n    Output()\n], NgxGalleryPreviewComponent.prototype, \"previewOpen\", void 0);\n__decorate([\n    Output()\n], NgxGalleryPreviewComponent.prototype, \"previewClose\", void 0);\n__decorate([\n    Output()\n], NgxGalleryPreviewComponent.prototype, \"activeChange\", void 0);\n__decorate([\n    ViewChild('previewImage')\n], NgxGalleryPreviewComponent.prototype, \"previewImage\", void 0);\n__decorate([\n    HostListener('mouseenter')\n], NgxGalleryPreviewComponent.prototype, \"onMouseEnter\", null);\n__decorate([\n    HostListener('mouseleave')\n], NgxGalleryPreviewComponent.prototype, \"onMouseLeave\", null);\nNgxGalleryPreviewComponent = __decorate([\n    Component({\n        selector: 'ngx-gallery-preview',\n        template: \"<ngx-gallery-arrows *ngIf=\\\"arrows\\\" (prevClick)=\\\"showPrev()\\\" (nextClick)=\\\"showNext()\\\" [prevDisabled]=\\\"!canShowPrev()\\\"\\n                    [nextDisabled]=\\\"!canShowNext()\\\" [arrowPrevIcon]=\\\"arrowPrevIcon\\\"\\n                    [arrowNextIcon]=\\\"arrowNextIcon\\\"></ngx-gallery-arrows>\\n<div class=\\\"ngx-gallery-preview-top\\\">\\n  <div class=\\\"ngx-gallery-preview-icons\\\">\\n    <ngx-gallery-action *ngFor=\\\"let action of actions\\\" [icon]=\\\"action.icon\\\" [disabled]=\\\"action.disabled\\\"\\n                        [titleText]=\\\"action.titleText\\\" (closeClick)=\\\"action.onClick($event, index)\\\"></ngx-gallery-action>\\n    <a *ngIf=\\\"download && src\\\" [href]=\\\"src\\\" class=\\\"ngx-gallery-icon\\\" aria-hidden=\\\"true\\\" download>\\n      <i class=\\\"ngx-gallery-icon-content {{ downloadIcon }}\\\"></i>\\n    </a>\\n    <ngx-gallery-action *ngIf=\\\"zoom\\\" [icon]=\\\"zoomOutIcon\\\" [disabled]=\\\"!canZoomOut()\\\"\\n                        (closeClick)=\\\"zoomOut()\\\"></ngx-gallery-action>\\n    <ngx-gallery-action *ngIf=\\\"zoom\\\" [icon]=\\\"zoomInIcon\\\" [disabled]=\\\"!canZoomIn()\\\"\\n                        (closeClick)=\\\"zoomIn()\\\"></ngx-gallery-action>\\n    <ngx-gallery-action *ngIf=\\\"rotate\\\" [icon]=\\\"rotateLeftIcon\\\" (closeClick)=\\\"rotateLeft()\\\"></ngx-gallery-action>\\n    <ngx-gallery-action *ngIf=\\\"rotate\\\" [icon]=\\\"rotateRightIcon\\\" (closeClick)=\\\"rotateRight()\\\"></ngx-gallery-action>\\n    <ngx-gallery-action *ngIf=\\\"fullscreen\\\" [icon]=\\\"'ngx-gallery-fullscreen ' + fullscreenIcon\\\"\\n                        (closeClick)=\\\"manageFullscreen()\\\"></ngx-gallery-action>\\n    <ngx-gallery-action [icon]=\\\"'ngx-gallery-close ' + closeIcon\\\" (closeClick)=\\\"close()\\\"></ngx-gallery-action>\\n  </div>\\n</div>\\n<div class=\\\"ngx-spinner-wrapper ngx-gallery-center\\\" [class.ngx-gallery-active]=\\\"showSpinner\\\">\\n  <i class=\\\"ngx-gallery-icon ngx-gallery-spinner {{spinnerIcon}}\\\" aria-hidden=\\\"true\\\"></i>\\n</div>\\n<div class=\\\"ngx-gallery-preview-wrapper\\\" (click)=\\\"closeOnClick && close()\\\" (mouseup)=\\\"mouseUpHandler($event)\\\"\\n     (mousemove)=\\\"mouseMoveHandler($event)\\\" (touchend)=\\\"mouseUpHandler($event)\\\" (touchmove)=\\\"mouseMoveHandler($event)\\\">\\n  <div class=\\\"ngx-gallery-preview-img-wrapper\\\">\\n    <img *ngIf=\\\"src\\\" #previewImage class=\\\"ngx-gallery-preview-img ngx-gallery-center\\\" [src]=\\\"src\\\"\\n         (click)=\\\"$event.stopPropagation()\\\" (mouseenter)=\\\"imageMouseEnter()\\\" (mouseleave)=\\\"imageMouseLeave()\\\"\\n         (mousedown)=\\\"mouseDownHandler($event)\\\" (touchstart)=\\\"mouseDownHandler($event)\\\"\\n         [class.ngx-gallery-active]=\\\"!loading\\\" [class.animation]=\\\"animation\\\" [class.ngx-gallery-grab]=\\\"canDragOnZoom()\\\"\\n         [style.transform]=\\\"getTransform()\\\" [style.left]=\\\"positionLeft + 'px'\\\" [style.top]=\\\"positionTop + 'px'\\\"/>\\n    <ngx-gallery-bullets *ngIf=\\\"bullets\\\" [count]=\\\"images.length\\\" [active]=\\\"index\\\"\\n                         (bulletChange)=\\\"showAtIndex($event)\\\"></ngx-gallery-bullets>\\n  </div>\\n  <div class=\\\"ngx-gallery-preview-text\\\" *ngIf=\\\"showDescription && description\\\" [innerHTML]=\\\"description\\\"\\n       (click)=\\\"$event.stopPropagation()\\\"></div>\\n</div>\\n\",\n        // encapsulation: ViewEncapsulation.None,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\":host.ngx-gallery-active{width:100%;height:100%;position:fixed;left:0;top:0;background:rgba(0,0,0,.7);z-index:10000;display:inline-block;font-size:50px!important}:host{display:none;font-size:50px!important}:host .ngx-gallery-arrow{font-size:50px!important}ngx-gallery-bullets{height:5%;-webkit-box-align:center;align-items:center;padding:0}.ngx-gallery-preview-img{opacity:0;max-width:90%;max-height:90%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:-webkit-transform .5s;transition:transform .5s;transition:transform .5s,-webkit-transform .5s}.ngx-gallery-preview-img.animation{-webkit-transition:opacity .5s linear,-webkit-transform .5s;transition:opacity .5s linear,transform .5s,-webkit-transform .5s}.ngx-gallery-preview-img.ngx-gallery-active{opacity:1}.ngx-gallery-preview-img.ngx-gallery-grab{cursor:-webkit-grab;cursor:grab}.ngx-gallery-icon.ngx-gallery-spinner{font-size:50px;left:0;display:inline-block}:host .ngx-gallery-preview-top{position:absolute;width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-size:25px}.ngx-gallery-preview-icons{float:right}.ngx-gallery-preview-icons .ngx-gallery-icon{position:relative;margin-right:10px;margin-top:10px;font-size:25px;cursor:pointer;text-decoration:none}.ngx-gallery-preview-icons .ngx-gallery-icon.ngx-gallery-icon-disabled{cursor:default;opacity:.4}.ngx-spinner-wrapper{width:50px;height:50px;display:none}.ngx-spinner-wrapper.ngx-gallery-active{display:inline-block}.ngx-gallery-center{position:absolute;left:0;right:0;bottom:0;margin:auto;top:0}.ngx-gallery-preview-text{width:100%;background:rgba(0,0,0,.7);padding:10px;text-align:center;color:#fff;font-size:16px;-webkit-box-flex:0;flex:0 1 auto;z-index:10}.ngx-gallery-preview-wrapper{width:100%;height:100%;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-flow:column}.ngx-gallery-preview-img-wrapper{-webkit-box-flex:1;flex:1 1 auto;position:relative}\"]\n    })\n], NgxGalleryPreviewComponent);\n\nclass NgxGalleryAnimation {\n}\nNgxGalleryAnimation.Fade = 'fade';\nNgxGalleryAnimation.Slide = 'slide';\nNgxGalleryAnimation.Rotate = 'rotate';\nNgxGalleryAnimation.Zoom = 'zoom';\n\nlet NgxGalleryImageComponent = class NgxGalleryImageComponent {\n    constructor(sanitization, elementRef, helperService) {\n        this.sanitization = sanitization;\n        this.elementRef = elementRef;\n        this.helperService = helperService;\n        this.imageClick = new EventEmitter();\n        this.activeChange = new EventEmitter();\n        this.canChangeImage = true;\n    }\n    // @HostBinding('style.display') public display = 'inline-block';\n    // @HostBinding('style.background-color') public color = 'lime';\n    ngOnInit() {\n        if (this.arrows && this.arrowsAutoHide) {\n            this.arrows = false;\n        }\n        if (this.autoPlay) {\n            this.startAutoPlay();\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.swipe) {\n            this.helperService.manageSwipe(this.swipe, this.elementRef, 'image', () => this.showNext(), () => this.showPrev());\n        }\n    }\n    onMouseEnter() {\n        if (this.arrowsAutoHide && !this.arrows) {\n            this.arrows = true;\n        }\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.stopAutoPlay();\n        }\n    }\n    onMouseLeave() {\n        if (this.arrowsAutoHide && this.arrows) {\n            this.arrows = false;\n        }\n        if (this.autoPlay && this.autoPlayPauseOnHover) {\n            this.startAutoPlay();\n        }\n    }\n    reset(index) {\n        this.selectedIndex = index;\n    }\n    getImages() {\n        if (!this.images) {\n            return [];\n        }\n        if (this.lazyLoading) {\n            const indexes = [this.selectedIndex];\n            const prevIndex = this.selectedIndex - 1;\n            if (prevIndex === -1 && this.infinityMove) {\n                indexes.push(this.images.length - 1);\n            }\n            else if (prevIndex >= 0) {\n                indexes.push(prevIndex);\n            }\n            const nextIndex = this.selectedIndex + 1;\n            if (nextIndex === this.images.length && this.infinityMove) {\n                indexes.push(0);\n            }\n            else if (nextIndex < this.images.length) {\n                indexes.push(nextIndex);\n            }\n            return this.images.filter((img, i) => indexes.indexOf(i) !== -1);\n        }\n        else {\n            return this.images;\n        }\n    }\n    startAutoPlay() {\n        this.stopAutoPlay();\n        this.timer = setInterval(() => {\n            if (!this.showNext()) {\n                this.selectedIndex = -1;\n                this.showNext();\n            }\n        }, this.autoPlayInterval);\n    }\n    stopAutoPlay() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n    handleClick(event, index) {\n        if (this.clickable) {\n            this.imageClick.emit(index);\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    show(index) {\n        this.selectedIndex = index;\n        this.activeChange.emit(this.selectedIndex);\n        this.setChangeTimeout();\n    }\n    showNext() {\n        if (this.canShowNext() && this.canChangeImage) {\n            this.selectedIndex++;\n            if (this.selectedIndex === this.images.length) {\n                this.selectedIndex = 0;\n            }\n            this.activeChange.emit(this.selectedIndex);\n            this.setChangeTimeout();\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    showPrev() {\n        if (this.canShowPrev() && this.canChangeImage) {\n            this.selectedIndex--;\n            if (this.selectedIndex < 0) {\n                this.selectedIndex = this.images.length - 1;\n            }\n            this.activeChange.emit(this.selectedIndex);\n            this.setChangeTimeout();\n        }\n    }\n    setChangeTimeout() {\n        this.canChangeImage = false;\n        let timeout = 1000;\n        if (this.animation === NgxGalleryAnimation.Slide\n            || this.animation === NgxGalleryAnimation.Fade) {\n            timeout = 500;\n        }\n        setTimeout(() => {\n            this.canChangeImage = true;\n        }, timeout);\n    }\n    canShowNext() {\n        if (this.images) {\n            return this.infinityMove || this.selectedIndex < this.images.length - 1;\n        }\n        else {\n            return false;\n        }\n    }\n    canShowPrev() {\n        if (this.images) {\n            return this.infinityMove || this.selectedIndex > 0;\n        }\n        else {\n            return false;\n        }\n    }\n    getSafeUrl(image) {\n        return this.sanitization.bypassSecurityTrustStyle(this.helperService.getBackgroundUrl(image));\n    }\n};\nNgxGalleryImageComponent.ctorParameters = () => [\n    { type: DomSanitizer },\n    { type: ElementRef },\n    { type: NgxGalleryService }\n];\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"images\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"clickable\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"selectedIndex\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"arrows\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"arrowsAutoHide\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"swipe\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"animation\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"size\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"arrowPrevIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"arrowNextIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"autoPlay\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"autoPlayInterval\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"autoPlayPauseOnHover\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"infinityMove\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"lazyLoading\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"actions\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"descriptions\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"showDescription\", void 0);\n__decorate([\n    Input()\n], NgxGalleryImageComponent.prototype, \"bullets\", void 0);\n__decorate([\n    Output()\n], NgxGalleryImageComponent.prototype, \"imageClick\", void 0);\n__decorate([\n    Output()\n], NgxGalleryImageComponent.prototype, \"activeChange\", void 0);\n__decorate([\n    HostListener('mouseenter')\n], NgxGalleryImageComponent.prototype, \"onMouseEnter\", null);\n__decorate([\n    HostListener('mouseleave')\n], NgxGalleryImageComponent.prototype, \"onMouseLeave\", null);\nNgxGalleryImageComponent = __decorate([\n    Component({\n        selector: 'ngx-gallery-image',\n        template: \"<div class=\\\"ngx-gallery-image-wrapper ngx-gallery-animation-{{animation}} ngx-gallery-image-size-{{size}}\\\">\\n  <div class=\\\"ngx-gallery-image\\\" *ngFor=\\\"let image of getImages(); let i = index;\\\"\\n       [ngClass]=\\\"{ 'ngx-gallery-active': selectedIndex == image.index,\\n        'ngx-gallery-inactive-left': selectedIndex > image.index,\\n         'ngx-gallery-inactive-right': selectedIndex < image.index,\\n          'ngx-gallery-clickable': clickable }\\\"\\n       [style.background-image]=\\\"getSafeUrl(image.src)\\\" (click)=\\\"handleClick($event, image.index)\\\">\\n    <div class=\\\"ngx-gallery-icons-wrapper\\\">\\n      <ngx-gallery-action *ngFor=\\\"let action of actions\\\" [icon]=\\\"action.icon\\\" [disabled]=\\\"action.disabled\\\"\\n                          [titleText]=\\\"action.titleText\\\"\\n                          (closeClick)=\\\"action.onClick($event, image.index)\\\"></ngx-gallery-action>\\n    </div>\\n    <div class=\\\"ngx-gallery-image-text\\\" *ngIf=\\\"showDescription && descriptions[image.index]\\\"\\n         [innerHTML]=\\\"descriptions[image.index]\\\" (click)=\\\"$event.stopPropagation()\\\"></div>\\n  </div>\\n</div>\\n<ngx-gallery-bullets *ngIf=\\\"bullets\\\" [count]=\\\"images.length\\\" [active]=\\\"selectedIndex\\\"\\n                     (bulletChange)=\\\"show($event)\\\"></ngx-gallery-bullets>\\n<ngx-gallery-arrows class=\\\"ngx-gallery-image-size-{{size}}\\\" *ngIf=\\\"arrows\\\" (prevClick)=\\\"showPrev()\\\"\\n                    (nextClick)=\\\"showNext()\\\" [prevDisabled]=\\\"!canShowPrev()\\\" [nextDisabled]=\\\"!canShowNext()\\\"\\n                    [arrowPrevIcon]=\\\"arrowPrevIcon\\\" [arrowNextIcon]=\\\"arrowNextIcon\\\"></ngx-gallery-arrows>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\":host{width:100%;display:inline-block;position:relative;font-size:25px}.ngx-gallery-image-wrapper{width:100%;height:100%;position:absolute;left:0;top:0;overflow:hidden}.ngx-gallery-image{background-position:center;background-repeat:no-repeat;height:100%;width:100%;position:absolute;top:0}.ngx-gallery-image-size-cover .ngx-gallery-image{background-size:cover}.ngx-gallery-image-size-contain .ngx-gallery-image{background-size:contain}.ngx-gallery-animation-fade .ngx-gallery-image{left:0;opacity:0;-webkit-transition:.5s ease-in-out;transition:.5s ease-in-out}.ngx-gallery-animation-fade .ngx-gallery-image.ngx-gallery-active{opacity:1}.ngx-gallery-animation-slide .ngx-gallery-image{-webkit-transition:.5s ease-in-out;transition:.5s ease-in-out}.ngx-gallery-animation-slide .ngx-gallery-image.ngx-gallery-active{left:0}.ngx-gallery-animation-slide .ngx-gallery-image.ngx-gallery-inactive-left{left:-100%}.ngx-gallery-animation-slide .ngx-gallery-image.ngx-gallery-inactive-right{left:100%}.ngx-gallery-animation-rotate .ngx-gallery-image{-webkit-transition:1s;transition:1s;-webkit-transform:scale(3.5,3.5) rotate(90deg);transform:scale(3.5,3.5) rotate(90deg);left:0;opacity:0}.ngx-gallery-animation-rotate .ngx-gallery-image.ngx-gallery-active{-webkit-transform:scale(1,1) rotate(0);transform:scale(1,1) rotate(0);opacity:1}.ngx-gallery-animation-zoom .ngx-gallery-image{-webkit-transition:1s;transition:1s;-webkit-transform:scale(2.5,2.5);transform:scale(2.5,2.5);left:0;opacity:0}.ngx-gallery-animation-zoom .ngx-gallery-image.ngx-gallery-active{-webkit-transform:scale(1,1);transform:scale(1,1);opacity:1}.ngx-gallery-image-text{width:100%;background:rgba(0,0,0,.7);padding:10px;text-align:center;color:#fff;font-size:16px;position:absolute;bottom:0;z-index:10}\"]\n    })\n], NgxGalleryImageComponent);\n\nclass NgxGalleryOrder {\n}\nNgxGalleryOrder.Column = 1;\nNgxGalleryOrder.Row = 2;\nNgxGalleryOrder.Page = 3;\n\nlet NgxGalleryThumbnailsComponent = class NgxGalleryThumbnailsComponent {\n    constructor(sanitization, elementRef, helperService) {\n        this.sanitization = sanitization;\n        this.elementRef = elementRef;\n        this.helperService = helperService;\n        this.minStopIndex = 0;\n        this.activeChange = new EventEmitter();\n        this.index = 0;\n    }\n    ngOnInit() {\n    }\n    ngOnChanges(changes) {\n        if (changes.selectedIndex) {\n            this.validateIndex();\n        }\n        if (changes.swipe) {\n            this.helperService.manageSwipe(this.swipe, this.elementRef, 'thumbnails', () => this.moveRight(), () => this.moveLeft());\n        }\n        if (this.images) {\n            this.remainingCountValue = this.images.length - (this.rows * this.columns);\n        }\n    }\n    onMouseEnter() {\n        this.mouseenter = true;\n    }\n    onMouseLeave() {\n        this.mouseenter = false;\n    }\n    reset(index) {\n        this.selectedIndex = index;\n        this.setDefaultPosition();\n        this.index = 0;\n        this.validateIndex();\n    }\n    getImages() {\n        if (!this.images) {\n            return [];\n        }\n        if (this.remainingCount) {\n            return this.images.slice(0, this.rows * this.columns);\n        }\n        else if (this.lazyLoading && this.order !== NgxGalleryOrder.Row) {\n            let stopIndex = 0;\n            if (this.order === NgxGalleryOrder.Column) {\n                stopIndex = (this.index + this.columns + this.moveSize) * this.rows;\n            }\n            else if (this.order === NgxGalleryOrder.Page) {\n                stopIndex = this.index + ((this.columns * this.rows) * 2);\n            }\n            if (stopIndex <= this.minStopIndex) {\n                stopIndex = this.minStopIndex;\n            }\n            else {\n                this.minStopIndex = stopIndex;\n            }\n            return this.images.slice(0, stopIndex);\n        }\n        else {\n            return this.images;\n        }\n    }\n    handleClick(event, index) {\n        if (!this.hasLink(index)) {\n            this.selectedIndex = index;\n            this.activeChange.emit(index);\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    hasLink(index) {\n        if (this.links && this.links.length && this.links[index]) {\n            return true;\n        }\n    }\n    moveRight() {\n        if (this.canMoveRight()) {\n            this.index += this.moveSize;\n            const maxIndex = this.getMaxIndex() - this.columns;\n            if (this.index > maxIndex) {\n                this.index = maxIndex;\n            }\n            this.setThumbnailsPosition();\n        }\n    }\n    moveLeft() {\n        if (this.canMoveLeft()) {\n            this.index -= this.moveSize;\n            if (this.index < 0) {\n                this.index = 0;\n            }\n            this.setThumbnailsPosition();\n        }\n    }\n    canMoveRight() {\n        return this.index + this.columns < this.getMaxIndex();\n    }\n    canMoveLeft() {\n        return this.index !== 0;\n    }\n    getThumbnailLeft(index) {\n        let calculatedIndex;\n        if (this.order === NgxGalleryOrder.Column) {\n            calculatedIndex = Math.floor(index / this.rows);\n        }\n        else if (this.order === NgxGalleryOrder.Page) {\n            calculatedIndex = (index % this.columns) + (Math.floor(index / (this.rows * this.columns)) * this.columns);\n        }\n        else if (this.order === NgxGalleryOrder.Row && this.remainingCount) {\n            calculatedIndex = index % this.columns;\n        }\n        else {\n            calculatedIndex = index % Math.ceil(this.images.length / this.rows);\n        }\n        return this.getThumbnailPosition(calculatedIndex, this.columns);\n    }\n    getThumbnailTop(index) {\n        let calculatedIndex;\n        if (this.order === NgxGalleryOrder.Column) {\n            calculatedIndex = index % this.rows;\n        }\n        else if (this.order === NgxGalleryOrder.Page) {\n            calculatedIndex = Math.floor(index / this.columns) - (Math.floor(index / (this.rows * this.columns)) * this.rows);\n        }\n        else if (this.order === NgxGalleryOrder.Row && this.remainingCount) {\n            calculatedIndex = Math.floor(index / this.columns);\n        }\n        else {\n            calculatedIndex = Math.floor(index / Math.ceil(this.images.length / this.rows));\n        }\n        return this.getThumbnailPosition(calculatedIndex, this.rows);\n    }\n    getThumbnailWidth() {\n        return this.getThumbnailDimension(this.columns);\n    }\n    getThumbnailHeight() {\n        return this.getThumbnailDimension(this.rows);\n    }\n    setThumbnailsPosition() {\n        this.thumbnailsLeft = -((100 / this.columns) * this.index) + '%';\n        this.thumbnailsMarginLeft = -((this.margin - (((this.columns - 1)\n            * this.margin) / this.columns)) * this.index) + 'px';\n    }\n    setDefaultPosition() {\n        this.thumbnailsLeft = '0px';\n        this.thumbnailsMarginLeft = '0px';\n    }\n    canShowArrows() {\n        if (this.remainingCount) {\n            return false;\n        }\n        else {\n            return this.arrows && this.images && this.images.length > this.getVisibleCount()\n                && (!this.arrowsAutoHide || this.mouseenter);\n        }\n    }\n    validateIndex() {\n        if (this.images) {\n            let newIndex;\n            if (this.order === NgxGalleryOrder.Column) {\n                newIndex = Math.floor(this.selectedIndex / this.rows);\n            }\n            else {\n                newIndex = this.selectedIndex % Math.ceil(this.images.length / this.rows);\n            }\n            if (this.remainingCount) {\n                newIndex = 0;\n            }\n            if (newIndex < this.index || newIndex >= this.index + this.columns) {\n                const maxIndex = this.getMaxIndex() - this.columns;\n                this.index = newIndex > maxIndex ? maxIndex : newIndex;\n                this.setThumbnailsPosition();\n            }\n        }\n    }\n    getSafeUrl(image) {\n        return this.sanitization.bypassSecurityTrustStyle(this.helperService.getBackgroundUrl(image));\n    }\n    getThumbnailPosition(index, count) {\n        return this.getSafeStyle('calc(' + ((100 / count) * index) + '% + '\n            + ((this.margin - (((count - 1) * this.margin) / count)) * index) + 'px)');\n    }\n    getThumbnailDimension(count) {\n        if (this.margin !== 0) {\n            return this.getSafeStyle('calc(' + (100 / count) + '% - '\n                + (((count - 1) * this.margin) / count) + 'px)');\n        }\n        else {\n            return this.getSafeStyle('calc(' + (100 / count) + '% + 1px)');\n        }\n    }\n    getMaxIndex() {\n        if (this.order === NgxGalleryOrder.Page) {\n            let maxIndex = (Math.floor(this.images.length / this.getVisibleCount()) * this.columns);\n            if (this.images.length % this.getVisibleCount() > this.columns) {\n                maxIndex += this.columns;\n            }\n            else {\n                maxIndex += this.images.length % this.getVisibleCount();\n            }\n            return maxIndex;\n        }\n        else {\n            return Math.ceil(this.images.length / this.rows);\n        }\n    }\n    getVisibleCount() {\n        return this.columns * this.rows;\n    }\n    getSafeStyle(value) {\n        return this.sanitization.bypassSecurityTrustStyle(value);\n    }\n};\nNgxGalleryThumbnailsComponent.ctorParameters = () => [\n    { type: DomSanitizer },\n    { type: ElementRef },\n    { type: NgxGalleryService }\n];\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"images\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"links\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"labels\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"linkTarget\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"columns\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"rows\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"arrows\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"arrowsAutoHide\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"margin\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"selectedIndex\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"clickable\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"swipe\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"size\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"arrowPrevIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"arrowNextIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"moveSize\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"order\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"remainingCount\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"lazyLoading\", void 0);\n__decorate([\n    Input()\n], NgxGalleryThumbnailsComponent.prototype, \"actions\", void 0);\n__decorate([\n    Output()\n], NgxGalleryThumbnailsComponent.prototype, \"activeChange\", void 0);\n__decorate([\n    HostListener('mouseenter')\n], NgxGalleryThumbnailsComponent.prototype, \"onMouseEnter\", null);\n__decorate([\n    HostListener('mouseleave')\n], NgxGalleryThumbnailsComponent.prototype, \"onMouseLeave\", null);\nNgxGalleryThumbnailsComponent = __decorate([\n    Component({\n        selector: 'ngx-gallery-thumbnails',\n        template: \"<div class=\\\"ngx-gallery-thumbnails-wrapper ngx-gallery-thumbnail-size-{{size}}\\\">\\n  <div class=\\\"ngx-gallery-thumbnails\\\" [style.transform]=\\\"'translateX(' + thumbnailsLeft + ')'\\\"\\n       [style.marginLeft]=\\\"thumbnailsMarginLeft\\\">\\n    <a [href]=\\\"hasLink(i) ? links[i] : '#'\\\" [target]=\\\"linkTarget\\\" class=\\\"ngx-gallery-thumbnail\\\"\\n       *ngFor=\\\"let image of getImages(); let i = index;\\\" [style.background-image]=\\\"getSafeUrl(image)\\\"\\n       (click)=\\\"handleClick($event, i)\\\" [style.width]=\\\"getThumbnailWidth()\\\" [style.height]=\\\"getThumbnailHeight()\\\"\\n       [style.left]=\\\"getThumbnailLeft(i)\\\" [style.top]=\\\"getThumbnailTop(i)\\\"\\n       [ngClass]=\\\"{ 'ngx-gallery-active': i == selectedIndex, 'ngx-gallery-clickable': clickable }\\\"\\n       [attr.aria-label]=\\\"labels[i]\\\">\\n      <div class=\\\"ngx-gallery-icons-wrapper\\\">\\n        <ngx-gallery-action *ngFor=\\\"let action of actions\\\" [icon]=\\\"action.icon\\\" [disabled]=\\\"action.disabled\\\"\\n                            [titleText]=\\\"action.titleText\\\" (closeClick)=\\\"action.onClick($event, i)\\\"></ngx-gallery-action>\\n      </div>\\n      <div class=\\\"ngx-gallery-remaining-count-overlay\\\"\\n           *ngIf=\\\"remainingCount && remainingCountValue && (i == (rows * columns) - 1)\\\">\\n        <span class=\\\"ngx-gallery-remaining-count\\\">+{{remainingCountValue}}</span>\\n      </div>\\n    </a>\\n  </div>\\n</div>\\n<ngx-gallery-arrows *ngIf=\\\"canShowArrows()\\\" (prevClick)=\\\"moveLeft()\\\" (nextClick)=\\\"moveRight()\\\"\\n                    [prevDisabled]=\\\"!canMoveLeft()\\\" [nextDisabled]=\\\"!canMoveRight()\\\" [arrowPrevIcon]=\\\"arrowPrevIcon\\\"\\n                    [arrowNextIcon]=\\\"arrowNextIcon\\\"></ngx-gallery-arrows>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\"@charset \\\"UTF-8\\\";:host{width:100%;display:inline-block;position:relative;font-size:25px}.ngx-gallery-thumbnails-wrapper{width:100%;height:100%;position:absolute;overflow:hidden}.ngx-gallery-thumbnails{height:100%;width:100%;position:absolute;left:0;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .5s ease-in-out;transition:transform .5s ease-in-out;transition:transform .5s ease-in-out,-webkit-transform .5s ease-in-out;will-change:transform}.ngx-gallery-thumbnails .ngx-gallery-thumbnail{position:absolute;height:100%;background-position:center;background-repeat:no-repeat;text-decoration:none;border:1px double #000}.ngx-gallery-thumbnails .ngx-gallery-thumbnail .img{background-size:cover;height:100%}.ngx-gallery-thumbnails .ngx-gallery-thumbnail.ngx-gallery-active{border:1px double #cc4548}.ngx-gallery-thumbnail-size-cover .ngx-gallery-thumbnails .ngx-gallery-thumbnail{background-size:cover}.ngx-gallery-thumbnail-size-contain .ngx-gallery-thumbnails .ngx-gallery-thumbnail{background-size:contain}.ngx-gallery-remaining-count-overlay{width:100%;height:100%;position:absolute;left:0;top:0;background-color:rgba(0,0,0,.4)}.ngx-gallery-remaining-count{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);color:#fff;font-size:30px}\"]\n    })\n], NgxGalleryThumbnailsComponent);\n\nclass NgxGalleryAction {\n    constructor(action) {\n        this.icon = action.icon;\n        this.disabled = action.disabled ? action.disabled : false;\n        this.titleText = action.titleText ? action.titleText : '';\n        this.onClick = action.onClick;\n    }\n}\n\nclass NgxGalleryLayout {\n}\nNgxGalleryLayout.ThumbnailsTop = 'thumbnails-top';\nNgxGalleryLayout.ThumbnailsBottom = 'thumbnails-bottom';\n\nclass NgxGalleryImageSize {\n}\nNgxGalleryImageSize.Cover = 'cover';\nNgxGalleryImageSize.Contain = 'contain';\n\nclass NgxGalleryOptions {\n    constructor(obj) {\n        const preventDefaults = obj.breakpoint === undefined ? false : true;\n        function use(source, defaultValue) {\n            return obj && (source !== undefined || preventDefaults) ? source : defaultValue;\n        }\n        this.breakpoint = use(obj.breakpoint, undefined);\n        this.width = use(obj.width, '500px');\n        this.height = use(obj.height, '400px');\n        this.fullWidth = use(obj.fullWidth, false);\n        this.layout = use(obj.layout, NgxGalleryLayout.ThumbnailsBottom);\n        this.startIndex = use(obj.startIndex, 0);\n        this.linkTarget = use(obj.linkTarget, '_blank');\n        this.lazyLoading = use(obj.lazyLoading, true);\n        this.image = use(obj.image, true);\n        this.imagePercent = use(obj.imagePercent, 75);\n        this.imageArrows = use(obj.imageArrows, true);\n        this.imageArrowsAutoHide = use(obj.imageArrowsAutoHide, false);\n        this.imageSwipe = use(obj.imageSwipe, false);\n        this.imageAnimation = use(obj.imageAnimation, NgxGalleryAnimation.Fade);\n        this.imageSize = use(obj.imageSize, NgxGalleryImageSize.Cover);\n        this.imageAutoPlay = use(obj.imageAutoPlay, false);\n        this.imageAutoPlayInterval = use(obj.imageAutoPlayInterval, 2000);\n        this.imageAutoPlayPauseOnHover = use(obj.imageAutoPlayPauseOnHover, false);\n        this.imageInfinityMove = use(obj.imageInfinityMove, false);\n        if (obj && obj.imageActions && obj.imageActions.length) {\n            obj.imageActions = obj.imageActions.map(action => new NgxGalleryAction(action));\n        }\n        this.imageActions = use(obj.imageActions, []);\n        this.imageDescription = use(obj.imageDescription, false);\n        this.imageBullets = use(obj.imageBullets, false);\n        this.thumbnails = use(obj.thumbnails, true);\n        this.thumbnailsColumns = use(obj.thumbnailsColumns, 4);\n        this.thumbnailsRows = use(obj.thumbnailsRows, 1);\n        this.thumbnailsPercent = use(obj.thumbnailsPercent, 25);\n        this.thumbnailsMargin = use(obj.thumbnailsMargin, 10);\n        this.thumbnailsArrows = use(obj.thumbnailsArrows, true);\n        this.thumbnailsArrowsAutoHide = use(obj.thumbnailsArrowsAutoHide, false);\n        this.thumbnailsSwipe = use(obj.thumbnailsSwipe, false);\n        this.thumbnailsMoveSize = use(obj.thumbnailsMoveSize, 1);\n        this.thumbnailsOrder = use(obj.thumbnailsOrder, NgxGalleryOrder.Column);\n        this.thumbnailsRemainingCount = use(obj.thumbnailsRemainingCount, false);\n        this.thumbnailsAsLinks = use(obj.thumbnailsAsLinks, false);\n        this.thumbnailsAutoHide = use(obj.thumbnailsAutoHide, false);\n        this.thumbnailMargin = use(obj.thumbnailMargin, 10);\n        this.thumbnailSize = use(obj.thumbnailSize, NgxGalleryImageSize.Cover);\n        if (obj && obj.thumbnailActions && obj.thumbnailActions.length) {\n            obj.thumbnailActions = obj.thumbnailActions.map(action => new NgxGalleryAction(action));\n        }\n        this.thumbnailActions = use(obj.thumbnailActions, []);\n        this.preview = use(obj.preview, true);\n        this.previewDescription = use(obj.previewDescription, true);\n        this.previewArrows = use(obj.previewArrows, true);\n        this.previewArrowsAutoHide = use(obj.previewArrowsAutoHide, false);\n        this.previewSwipe = use(obj.previewSwipe, false);\n        this.previewFullscreen = use(obj.previewFullscreen, false);\n        this.previewForceFullscreen = use(obj.previewForceFullscreen, false);\n        this.previewCloseOnClick = use(obj.previewCloseOnClick, false);\n        this.previewCloseOnEsc = use(obj.previewCloseOnEsc, false);\n        this.previewKeyboardNavigation = use(obj.previewKeyboardNavigation, false);\n        this.previewAnimation = use(obj.previewAnimation, true);\n        this.previewAutoPlay = use(obj.previewAutoPlay, false);\n        this.previewAutoPlayInterval = use(obj.previewAutoPlayInterval, 2000);\n        this.previewAutoPlayPauseOnHover = use(obj.previewAutoPlayPauseOnHover, false);\n        this.previewInfinityMove = use(obj.previewInfinityMove, false);\n        this.previewZoom = use(obj.previewZoom, false);\n        this.previewZoomStep = use(obj.previewZoomStep, 0.1);\n        this.previewZoomMax = use(obj.previewZoomMax, 2);\n        this.previewZoomMin = use(obj.previewZoomMin, 0.5);\n        this.previewRotate = use(obj.previewRotate, false);\n        this.previewDownload = use(obj.previewDownload, false);\n        this.previewCustom = use(obj.previewCustom, undefined);\n        this.previewBullets = use(obj.previewBullets, false);\n        this.arrowPrevIcon = use(obj.arrowPrevIcon, 'fa fa-arrow-circle-left');\n        this.arrowNextIcon = use(obj.arrowNextIcon, 'fa fa-arrow-circle-right');\n        this.closeIcon = use(obj.closeIcon, 'fa fa-times-circle');\n        this.fullscreenIcon = use(obj.fullscreenIcon, 'fa fa-arrows-alt');\n        this.spinnerIcon = use(obj.spinnerIcon, 'fa fa-spinner fa-pulse fa-3x fa-fw');\n        this.zoomInIcon = use(obj.zoomInIcon, 'fa fa-search-plus');\n        this.zoomOutIcon = use(obj.zoomOutIcon, 'fa fa-search-minus');\n        this.rotateLeftIcon = use(obj.rotateLeftIcon, 'fa fa-undo');\n        this.rotateRightIcon = use(obj.rotateRightIcon, 'fa fa-repeat');\n        this.downloadIcon = use(obj.downloadIcon, 'fa fa-arrow-circle-down');\n        if (obj && obj.actions && obj.actions.length) {\n            obj.actions = obj.actions.map(action => new NgxGalleryAction(action));\n        }\n        this.actions = use(obj.actions, []);\n    }\n}\n\nclass NgxGalleryOrderedImage {\n    constructor(obj) {\n        this.src = obj.src;\n        this.index = obj.index;\n    }\n}\n\nlet NgxGalleryComponent = class NgxGalleryComponent {\n    constructor(myElement) {\n        this.myElement = myElement;\n        this.options = [{}];\n        this.imagesReady = new EventEmitter();\n        // tslint:disable-next-line:no-output-native\n        this.change = new EventEmitter();\n        this.previewOpen = new EventEmitter();\n        this.previewClose = new EventEmitter();\n        this.previewChange = new EventEmitter();\n        this.oldImagesLength = 0;\n        this.selectedIndex = 0;\n        this.breakpoint = undefined;\n        this.prevBreakpoint = undefined;\n    }\n    ngOnInit() {\n        this.options = this.options.map((opt) => new NgxGalleryOptions(opt));\n        this.sortOptions();\n        this.setBreakpoint();\n        this.setOptions();\n        this.checkFullWidth();\n        if (this.currentOptions) {\n            this.selectedIndex = this.currentOptions.startIndex;\n        }\n    }\n    ngDoCheck() {\n        if (this.images !== undefined && (this.images.length !== this.oldImagesLength)\n            || (this.images !== this.oldImages)) {\n            this.oldImagesLength = this.images.length;\n            this.oldImages = this.images;\n            this.setOptions();\n            this.setImages();\n            if (this.images && this.images.length) {\n                this.imagesReady.emit();\n            }\n            if (this.image) {\n                this.image.reset(this.currentOptions.startIndex);\n            }\n            if (this.currentOptions.thumbnailsAutoHide && this.currentOptions.thumbnails\n                && this.images.length <= 1) {\n                this.currentOptions.thumbnails = false;\n                this.currentOptions.imageArrows = false;\n            }\n            this.resetThumbnails();\n        }\n    }\n    ngAfterViewInit() {\n        this.checkFullWidth();\n    }\n    onResize() {\n        this.setBreakpoint();\n        if (this.prevBreakpoint !== this.breakpoint) {\n            this.setOptions();\n            this.resetThumbnails();\n        }\n        if (this.currentOptions && this.currentOptions.fullWidth) {\n            if (this.fullWidthTimeout) {\n                clearTimeout(this.fullWidthTimeout);\n            }\n            this.fullWidthTimeout = setTimeout(() => {\n                this.checkFullWidth();\n            }, 200);\n        }\n    }\n    getImageHeight() {\n        return (this.currentOptions && this.currentOptions.thumbnails) ?\n            this.currentOptions.imagePercent + '%' : '100%';\n    }\n    getThumbnailsHeight() {\n        if (this.currentOptions && this.currentOptions.image) {\n            return 'calc(' + this.currentOptions.thumbnailsPercent + '% - '\n                + this.currentOptions.thumbnailsMargin + 'px)';\n        }\n        else {\n            return '100%';\n        }\n    }\n    getThumbnailsMarginTop() {\n        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsBottom) {\n            return this.currentOptions.thumbnailsMargin + 'px';\n        }\n        else {\n            return '0px';\n        }\n    }\n    getThumbnailsMarginBottom() {\n        if (this.currentOptions && this.currentOptions.layout === NgxGalleryLayout.ThumbnailsTop) {\n            return this.currentOptions.thumbnailsMargin + 'px';\n        }\n        else {\n            return '0px';\n        }\n    }\n    openPreview(index) {\n        if (this.currentOptions.previewCustom) {\n            this.currentOptions.previewCustom(index);\n        }\n        else {\n            this.previewEnabled = true;\n            this.preview.open(index);\n        }\n    }\n    onPreviewOpen() {\n        this.previewOpen.emit();\n        if (this.image && this.image.autoPlay) {\n            this.image.stopAutoPlay();\n        }\n    }\n    onPreviewClose() {\n        this.previewEnabled = false;\n        this.previewClose.emit();\n        if (this.image && this.image.autoPlay) {\n            this.image.startAutoPlay();\n        }\n    }\n    selectFromImage(index) {\n        this.select(index);\n    }\n    selectFromThumbnails(index) {\n        this.select(index);\n        if (this.currentOptions && this.currentOptions.thumbnails && this.currentOptions.preview\n            && (!this.currentOptions.image || this.currentOptions.thumbnailsRemainingCount)) {\n            this.openPreview(this.selectedIndex);\n        }\n    }\n    show(index) {\n        this.select(index);\n    }\n    showNext() {\n        this.image.showNext();\n    }\n    showPrev() {\n        this.image.showPrev();\n    }\n    canShowNext() {\n        if (this.images && this.currentOptions) {\n            return !!(this.currentOptions.imageInfinityMove || this.selectedIndex < this.images.length - 1);\n        }\n        else {\n            return false;\n        }\n    }\n    canShowPrev() {\n        if (this.images && this.currentOptions) {\n            return !!(this.currentOptions.imageInfinityMove || this.selectedIndex > 0);\n        }\n        else {\n            return false;\n        }\n    }\n    previewSelect(index) {\n        this.previewChange.emit({ index, image: this.images[index] });\n    }\n    moveThumbnailsRight() {\n        this.thumbnails.moveRight();\n    }\n    moveThumbnailsLeft() {\n        this.thumbnails.moveLeft();\n    }\n    canMoveThumbnailsRight() {\n        return this.thumbnails.canMoveRight();\n    }\n    canMoveThumbnailsLeft() {\n        return this.thumbnails.canMoveLeft();\n    }\n    resetThumbnails() {\n        if (this.thumbnails) {\n            this.thumbnails.reset(this.currentOptions.startIndex);\n        }\n    }\n    select(index) {\n        this.selectedIndex = index;\n        this.change.emit({\n            index,\n            image: this.images[index]\n        });\n    }\n    checkFullWidth() {\n        if (this.currentOptions && this.currentOptions.fullWidth) {\n            this.width = document.body.clientWidth + 'px';\n            this.left = (-(document.body.clientWidth -\n                this.myElement.nativeElement.parentNode.innerWidth) / 2) + 'px';\n        }\n    }\n    setImages() {\n        this.smallImages = this.images.map((img) => img.small);\n        this.mediumImages = this.images.map((img, i) => new NgxGalleryOrderedImage({\n            src: img.medium,\n            index: i\n        }));\n        this.bigImages = this.images.map((img) => img.big);\n        this.descriptions = this.images.map((img) => img.description);\n        this.links = this.images.map((img) => img.url);\n        this.labels = this.images.map((img) => img.label);\n    }\n    setBreakpoint() {\n        this.prevBreakpoint = this.breakpoint;\n        let breakpoints;\n        if (typeof window !== 'undefined') {\n            breakpoints = this.options.filter((opt) => opt.breakpoint >= window.innerWidth)\n                .map((opt) => opt.breakpoint);\n        }\n        if (breakpoints && breakpoints.length) {\n            this.breakpoint = breakpoints.pop();\n        }\n        else {\n            this.breakpoint = undefined;\n        }\n    }\n    sortOptions() {\n        this.options = [\n            ...this.options.filter((a) => a.breakpoint === undefined),\n            ...this.options\n                .filter((a) => a.breakpoint !== undefined)\n                .sort((a, b) => b.breakpoint - a.breakpoint)\n        ];\n    }\n    setOptions() {\n        this.currentOptions = new NgxGalleryOptions({});\n        this.options\n            .filter((opt) => opt.breakpoint === undefined || opt.breakpoint >= this.breakpoint)\n            .map((opt) => this.combineOptions(this.currentOptions, opt));\n        this.width = this.currentOptions.width;\n        this.height = this.currentOptions.height;\n    }\n    combineOptions(first, second) {\n        Object.keys(second).map((val) => first[val] = second[val] !== undefined ? second[val] : first[val]);\n    }\n};\nNgxGalleryComponent.ctorParameters = () => [\n    { type: ElementRef }\n];\n__decorate([\n    Input()\n], NgxGalleryComponent.prototype, \"options\", void 0);\n__decorate([\n    Input()\n], NgxGalleryComponent.prototype, \"images\", void 0);\n__decorate([\n    Output()\n], NgxGalleryComponent.prototype, \"imagesReady\", void 0);\n__decorate([\n    Output()\n], NgxGalleryComponent.prototype, \"change\", void 0);\n__decorate([\n    Output()\n], NgxGalleryComponent.prototype, \"previewOpen\", void 0);\n__decorate([\n    Output()\n], NgxGalleryComponent.prototype, \"previewClose\", void 0);\n__decorate([\n    Output()\n], NgxGalleryComponent.prototype, \"previewChange\", void 0);\n__decorate([\n    ViewChild(NgxGalleryPreviewComponent)\n], NgxGalleryComponent.prototype, \"preview\", void 0);\n__decorate([\n    ViewChild(NgxGalleryImageComponent)\n], NgxGalleryComponent.prototype, \"image\", void 0);\n__decorate([\n    ViewChild(NgxGalleryThumbnailsComponent)\n], NgxGalleryComponent.prototype, \"thumbnails\", void 0);\n__decorate([\n    HostBinding('style.width')\n], NgxGalleryComponent.prototype, \"width\", void 0);\n__decorate([\n    HostBinding('style.height')\n], NgxGalleryComponent.prototype, \"height\", void 0);\n__decorate([\n    HostBinding('style.left')\n], NgxGalleryComponent.prototype, \"left\", void 0);\n__decorate([\n    HostListener('window:resize')\n], NgxGalleryComponent.prototype, \"onResize\", null);\nNgxGalleryComponent = __decorate([\n    Component({\n        selector: 'ngx-gallery',\n        template: \"<div class=\\\"ngx-gallery-layout {{currentOptions?.layout}}\\\">\\n  <ngx-gallery-image *ngIf=\\\"currentOptions?.image\\\" [style.height]=\\\"getImageHeight()\\\" [images]=\\\"mediumImages\\\"\\n                     [clickable]=\\\"currentOptions?.preview\\\" [selectedIndex]=\\\"selectedIndex\\\"\\n                     [arrows]=\\\"currentOptions?.imageArrows\\\" [arrowsAutoHide]=\\\"currentOptions?.imageArrowsAutoHide\\\"\\n                     [arrowPrevIcon]=\\\"currentOptions?.arrowPrevIcon\\\" [arrowNextIcon]=\\\"currentOptions?.arrowNextIcon\\\"\\n                     [swipe]=\\\"currentOptions?.imageSwipe\\\" [animation]=\\\"currentOptions?.imageAnimation\\\"\\n                     [size]=\\\"currentOptions?.imageSize\\\" [autoPlay]=\\\"currentOptions?.imageAutoPlay\\\"\\n                     [autoPlayInterval]=\\\"currentOptions?.imageAutoPlayInterval\\\"\\n                     [autoPlayPauseOnHover]=\\\"currentOptions?.imageAutoPlayPauseOnHover\\\"\\n                     [infinityMove]=\\\"currentOptions?.imageInfinityMove\\\" [lazyLoading]=\\\"currentOptions?.lazyLoading\\\"\\n                     [actions]=\\\"currentOptions?.imageActions\\\" [descriptions]=\\\"descriptions\\\"\\n                     [showDescription]=\\\"currentOptions?.imageDescription\\\" [bullets]=\\\"currentOptions?.imageBullets\\\"\\n                     (imageClick)=\\\"openPreview($event)\\\" (activeChange)=\\\"selectFromImage($event)\\\"></ngx-gallery-image>\\n\\n  <ngx-gallery-thumbnails *ngIf=\\\"currentOptions?.thumbnails\\\" [style.marginTop]=\\\"getThumbnailsMarginTop()\\\"\\n                          [style.marginBottom]=\\\"getThumbnailsMarginBottom()\\\" [style.height]=\\\"getThumbnailsHeight()\\\"\\n                          [images]=\\\"smallImages\\\" [links]=\\\"currentOptions?.thumbnailsAsLinks ? links : []\\\"\\n                          [labels]=\\\"labels\\\" [linkTarget]=\\\"currentOptions?.linkTarget\\\" [selectedIndex]=\\\"selectedIndex\\\"\\n                          [columns]=\\\"currentOptions?.thumbnailsColumns\\\" [rows]=\\\"currentOptions?.thumbnailsRows\\\"\\n                          [margin]=\\\"currentOptions?.thumbnailMargin\\\" [arrows]=\\\"currentOptions?.thumbnailsArrows\\\"\\n                          [arrowsAutoHide]=\\\"currentOptions?.thumbnailsArrowsAutoHide\\\"\\n                          [arrowPrevIcon]=\\\"currentOptions?.arrowPrevIcon\\\"\\n                          [arrowNextIcon]=\\\"currentOptions?.arrowNextIcon\\\"\\n                          [clickable]=\\\"currentOptions?.image || currentOptions?.preview\\\"\\n                          [swipe]=\\\"currentOptions?.thumbnailsSwipe\\\" [size]=\\\"currentOptions?.thumbnailSize\\\"\\n                          [moveSize]=\\\"currentOptions?.thumbnailsMoveSize\\\" [order]=\\\"currentOptions?.thumbnailsOrder\\\"\\n                          [remainingCount]=\\\"currentOptions?.thumbnailsRemainingCount\\\"\\n                          [lazyLoading]=\\\"currentOptions?.lazyLoading\\\" [actions]=\\\"currentOptions?.thumbnailActions\\\"\\n                          (activeChange)=\\\"selectFromThumbnails($event)\\\"></ngx-gallery-thumbnails>\\n\\n  <ngx-gallery-preview [images]=\\\"bigImages\\\" [descriptions]=\\\"descriptions\\\"\\n                       [showDescription]=\\\"currentOptions?.previewDescription\\\"\\n                       [arrowPrevIcon]=\\\"currentOptions?.arrowPrevIcon\\\" [arrowNextIcon]=\\\"currentOptions?.arrowNextIcon\\\"\\n                       [closeIcon]=\\\"currentOptions?.closeIcon\\\" [fullscreenIcon]=\\\"currentOptions?.fullscreenIcon\\\"\\n                       [spinnerIcon]=\\\"currentOptions?.spinnerIcon\\\" [arrows]=\\\"currentOptions?.previewArrows\\\"\\n                       [arrowsAutoHide]=\\\"currentOptions?.previewArrowsAutoHide\\\" [swipe]=\\\"currentOptions?.previewSwipe\\\"\\n                       [fullscreen]=\\\"currentOptions?.previewFullscreen\\\"\\n                       [forceFullscreen]=\\\"currentOptions?.previewForceFullscreen\\\"\\n                       [closeOnClick]=\\\"currentOptions?.previewCloseOnClick\\\"\\n                       [closeOnEsc]=\\\"currentOptions?.previewCloseOnEsc\\\"\\n                       [keyboardNavigation]=\\\"currentOptions?.previewKeyboardNavigation\\\"\\n                       [animation]=\\\"currentOptions?.previewAnimation\\\" [autoPlay]=\\\"currentOptions?.previewAutoPlay\\\"\\n                       [autoPlayInterval]=\\\"currentOptions?.previewAutoPlayInterval\\\"\\n                       [autoPlayPauseOnHover]=\\\"currentOptions?.previewAutoPlayPauseOnHover\\\"\\n                       [infinityMove]=\\\"currentOptions?.previewInfinityMove\\\" [zoom]=\\\"currentOptions?.previewZoom\\\"\\n                       [zoomStep]=\\\"currentOptions?.previewZoomStep\\\" [zoomMax]=\\\"currentOptions?.previewZoomMax\\\"\\n                       [zoomMin]=\\\"currentOptions?.previewZoomMin\\\" [zoomInIcon]=\\\"currentOptions?.zoomInIcon\\\"\\n                       [zoomOutIcon]=\\\"currentOptions?.zoomOutIcon\\\" [actions]=\\\"currentOptions?.actions\\\"\\n                       [rotate]=\\\"currentOptions?.previewRotate\\\" [rotateLeftIcon]=\\\"currentOptions?.rotateLeftIcon\\\"\\n                       [rotateRightIcon]=\\\"currentOptions?.rotateRightIcon\\\" [download]=\\\"currentOptions?.previewDownload\\\"\\n                       [downloadIcon]=\\\"currentOptions?.downloadIcon\\\" [bullets]=\\\"currentOptions?.previewBullets\\\"\\n                       (previewClose)=\\\"onPreviewClose()\\\" (previewOpen)=\\\"onPreviewOpen()\\\"\\n                       (activeChange)=\\\"previewSelect($event)\\\"\\n                       [class.ngx-gallery-active]=\\\"previewEnabled\\\"></ngx-gallery-preview>\\n</div>\\n\",\n        encapsulation: ViewEncapsulation.None,\n        providers: [NgxGalleryService],\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\":host{display:inline-block}:host>*{float:left}.ngx-gallery-layout{width:100%;height:100%;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.ngx-gallery-layout.thumbnails-top ngx-gallery-image{-webkit-box-ordinal-group:3;order:2}.ngx-gallery-layout.thumbnails-bottom ngx-gallery-image,.ngx-gallery-layout.thumbnails-top ngx-gallery-thumbnails{-webkit-box-ordinal-group:2;order:1}.ngx-gallery-layout.thumbnails-bottom ngx-gallery-thumbnails{-webkit-box-ordinal-group:3;order:2}*{box-sizing:border-box}.ngx-gallery-icon{color:#fff;position:absolute;display:inline-block}.ngx-gallery-icon .ngx-gallery-icon-content{display:block}ngx-gallery-preview{font-size:25px}ngx-gallery-preview .ngx-gallery-icon{z-index:2000}.ngx-gallery-clickable{cursor:pointer}.ngx-gallery-icons-wrapper .ngx-gallery-icon{position:relative;margin-right:5px;margin-top:5px;font-size:20px;cursor:pointer}.ngx-gallery-icons-wrapper{float:right}\"]\n    })\n], NgxGalleryComponent);\n\nlet NgxGalleryArrowsComponent = class NgxGalleryArrowsComponent {\n    constructor() {\n        this.prevClick = new EventEmitter();\n        this.nextClick = new EventEmitter();\n    }\n    ngOnInit() {\n    }\n    handlePrevClick() {\n        this.prevClick.emit();\n    }\n    handleNextClick() {\n        this.nextClick.emit();\n    }\n};\n__decorate([\n    Input()\n], NgxGalleryArrowsComponent.prototype, \"prevDisabled\", void 0);\n__decorate([\n    Input()\n], NgxGalleryArrowsComponent.prototype, \"nextDisabled\", void 0);\n__decorate([\n    Input()\n], NgxGalleryArrowsComponent.prototype, \"arrowPrevIcon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryArrowsComponent.prototype, \"arrowNextIcon\", void 0);\n__decorate([\n    Output()\n], NgxGalleryArrowsComponent.prototype, \"prevClick\", void 0);\n__decorate([\n    Output()\n], NgxGalleryArrowsComponent.prototype, \"nextClick\", void 0);\nNgxGalleryArrowsComponent = __decorate([\n    Component({\n        selector: 'ngx-gallery-arrows',\n        template: \"<div class=\\\"ngx-gallery-arrows-wrapper ngx-gallery-arrow-left\\\">\\n  <div class=\\\"ngx-gallery-icon ngx-gallery-arrow\\\"  (click)=\\\"handlePrevClick()\\\" [class.ngx-gallery-disabled]=\\\"prevDisabled\\\">\\n    <i class=\\\"ngx-gallery-icon-content fa fa-arrow-circle-left\\\"></i>\\n  </div>\\n</div>\\n<div class=\\\"ngx-gallery-arrows-wrapper ngx-gallery-arrow-right\\\">\\n  <div class=\\\"ngx-gallery-icon ngx-gallery-arrow\\\"  (click)=\\\"handleNextClick()\\\" [class.ngx-gallery-disabled]=\\\"nextDisabled\\\">\\n    <i class=\\\"ngx-gallery-icon-content fa fa-arrow-circle-right\\\"></i>\\n  </div>\\n</div>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\".ngx-gallery-arrow-wrapper{position:absolute;height:100%;width:1px;display:table;table-layout:fixed}.ngx-gallery-preview-img-wrapper .ngx-gallery-arrow-wrapper{z-index:10001}.ngx-gallery-arrow-left{left:0}.ngx-gallery-arrow-right{right:0}.ngx-gallery-arrow{top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);cursor:pointer}.ngx-gallery-arrow.ngx-gallery-disabled{opacity:.6;cursor:default}.ngx-gallery-arrow-left .ngx-gallery-arrow{left:10px}.ngx-gallery-arrow-right .ngx-gallery-arrow{right:10px}\"]\n    })\n], NgxGalleryArrowsComponent);\n\nlet NgxGalleryActionComponent = class NgxGalleryActionComponent {\n    constructor() {\n        this.disabled = false;\n        this.titleText = '';\n        this.closeClick = new EventEmitter();\n    }\n    ngOnInit() {\n    }\n    handleClick(event) {\n        if (!this.disabled) {\n            this.closeClick.emit(event);\n        }\n        event.stopPropagation();\n        event.preventDefault();\n    }\n};\n__decorate([\n    Input()\n], NgxGalleryActionComponent.prototype, \"icon\", void 0);\n__decorate([\n    Input()\n], NgxGalleryActionComponent.prototype, \"disabled\", void 0);\n__decorate([\n    Input()\n], NgxGalleryActionComponent.prototype, \"titleText\", void 0);\n__decorate([\n    Output()\n], NgxGalleryActionComponent.prototype, \"closeClick\", void 0);\nNgxGalleryActionComponent = __decorate([\n    Component({\n        selector: 'ngx-gallery-action',\n        template: \"<div class=\\\"ngx-gallery-icon\\\" [class.ngx-gallery-icon-disabled]=\\\"disabled\\\"\\n     aria-hidden=\\\"true\\\"\\n     title=\\\"{{ titleText }}\\\"\\n     (click)=\\\"handleClick($event)\\\">\\n  <i class=\\\"ngx-gallery-icon-content {{ icon }}\\\"></i>\\n</div>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\".ngx-gallery-icon{color:#fff;z-index:2000;display:inline-block;position:relative;margin-right:10px;margin-top:10px;font-size:25px;cursor:pointer;text-decoration:none}.ngx-gallery-icon .ngx-gallery-icon-content{display:block}\"]\n    })\n], NgxGalleryActionComponent);\n\nlet NgxGalleryBulletsComponent = class NgxGalleryBulletsComponent {\n    constructor() {\n        this.active = 0;\n        this.bulletChange = new EventEmitter();\n    }\n    ngOnInit() {\n    }\n    getBullets() {\n        return Array(this.count);\n    }\n    handleChange(event, index) {\n        this.bulletChange.emit(index);\n    }\n};\n__decorate([\n    Input()\n], NgxGalleryBulletsComponent.prototype, \"count\", void 0);\n__decorate([\n    Input()\n], NgxGalleryBulletsComponent.prototype, \"active\", void 0);\n__decorate([\n    Output()\n], NgxGalleryBulletsComponent.prototype, \"bulletChange\", void 0);\nNgxGalleryBulletsComponent = __decorate([\n    Component({\n        selector: 'ngx-gallery-bullets',\n        template: \"<div class=\\\"ngx-gallery-bullet\\\" *ngFor=\\\"let bullet of getBullets(); let i = index;\\\" (click)=\\\"handleChange($event, i)\\\"\\n     [ngClass]=\\\"{ 'ngx-gallery-active': i == active }\\\"></div>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\":host{position:absolute;z-index:2000;display:-webkit-inline-box;display:inline-flex;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);bottom:0;padding:10px}.ngx-gallery-bullet{width:10px;height:10px;border-radius:50%;cursor:pointer;background:#fff}.ngx-gallery-bullet:not(:first-child){margin-left:5px}.ngx-gallery-bullet.ngx-gallery-active,.ngx-gallery-bullet:hover{background:#000}\"]\n    })\n], NgxGalleryBulletsComponent);\n\nlet CustomHammerConfig = class CustomHammerConfig extends HammerGestureConfig {\n    constructor() {\n        super(...arguments);\n        this.overrides = {\n            pinch: { enable: false },\n            rotate: { enable: false }\n        };\n    }\n};\nCustomHammerConfig = __decorate([\n    Injectable()\n], CustomHammerConfig);\nlet NgxGalleryModule = class NgxGalleryModule {\n};\nNgxGalleryModule = __decorate([\n    NgModule({\n        declarations: [\n            NgxGalleryComponent,\n            NgxGalleryImageComponent,\n            NgxGalleryArrowsComponent,\n            NgxGalleryThumbnailsComponent,\n            NgxGalleryPreviewComponent,\n            NgxGalleryActionComponent,\n            NgxGalleryBulletsComponent\n        ],\n        imports: [CommonModule],\n        exports: [NgxGalleryComponent],\n        providers: [\n            { provide: HAMMER_GESTURE_CONFIG, useClass: CustomHammerConfig }\n        ]\n    })\n], NgxGalleryModule);\n\nclass NgxGalleryImage {\n    constructor(obj) {\n        this.small = obj.small;\n        this.medium = obj.medium;\n        this.big = obj.big;\n        this.description = obj.description;\n        this.url = obj.url;\n        this.label = obj.label;\n    }\n}\n\n/*\n * Public API Surface of ngx-gallery\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CustomHammerConfig, NgxGalleryAction, NgxGalleryAnimation, NgxGalleryArrowsComponent, NgxGalleryBulletsComponent, NgxGalleryComponent, NgxGalleryImage, NgxGalleryImageSize, NgxGalleryLayout, NgxGalleryModule, NgxGalleryOptions, NgxGalleryOrder, NgxGalleryOrderedImage, NgxGalleryPreviewComponent, NgxGalleryService, NgxGalleryThumbnailsComponent, NgxGalleryImageComponent as ɵa, NgxGalleryActionComponent as ɵb };\n"]}